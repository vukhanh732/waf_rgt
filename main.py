import argparse
import datetime
import logging
from parser import parse_log_entry
from detector import detect_attacks
from rule_generator import generate_rule # Import our new rule generator

# --- Logging Setup ---
logging.basicConfig(
    level=logging.INFO, # Changed back to INFO for cleaner output during normal runs
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("waf_rgt.log"),
        logging.StreamHandler()
    ]
)

def read_logs(file_path):
    """
    Reads log entries from a specified file and parses them.

    Args:
        file_path (str): The path to the log file.

    Returns:
        list: A list of dictionaries, where each dictionary represents a parsed request.
    """
    parsed_requests = []
    try:
        with open(file_path, 'r') as f:
            for line_num, line in enumerate(f, 1):
                parsed_data = parse_log_entry(line.strip())
                if parsed_data:
                    parsed_requests.append(parsed_data)
                    logging.debug(f"Successfully parsed line {line_num}: {line.strip()}")
                else:
                    logging.warning(f"Failed to parse line {line_num}: {line.strip()}")
    except FileNotFoundError:
        logging.error(f"Error: Log file not found at {file_path}")
    except Exception as e:
        logging.error(f"An unexpected error occurred while reading logs: {e}")
    
    return parsed_requests

def main():
    """Main function to run the WAF Rule Generator & Tuner."""
    logging.info("Starting AWAF-RGT: AI-Assisted WAF Rule Generator & Tuner")

    # --- Command Line Argument Parsing ---
    parser = argparse.ArgumentParser(
        description="Analyze web server logs to suggest WAF rules."
    )
    parser.add_argument(
        '-i', '--input', 
        type=str, 
        required=True, 
        help="Path to the input web server access log file."
    )
    parser.add_argument(
        '-o', '--output',
        type=str,
        default="generated_waf_rules.conf", # Default output file name
        help="Path to the output file for generated WAF rules."
    )

    args = parser.parse_args()

    # --- Read and Parse Logs ---
    logging.info(f"Reading logs from: {args.input}")
    requests = read_logs(args.input)
    logging.info(f"Finished parsing. Total requests parsed: {len(requests)}")

    # --- Detect Attacks ---
    logging.info("\n--- Analyzing requests for attack patterns ---")
    all_detected_threats = []
    for i, req in enumerate(requests):
        threats_in_request = detect_attacks(req)
        if threats_in_request:
            all_detected_threats.extend(threats_in_request)
            logging.info(f"Threat(s) detected in request from {req['ip_address']} ({req['method']} {req['full_path']}):")
            for threat in threats_in_request:
                logging.info(f"  - {threat['name']} (Severity: {threat['severity']}) in {threat['matched_field']}: '{threat['matched_value']}'")
        else:
            logging.debug(f"No threats detected in request from {req['ip_address']} ({req['method']} {req['full_path']})")

    logging.info(f"\n--- Analysis Complete. Total threats detected: {len(all_detected_threats)} ---")

    # --- Generate WAF Rules ---
    logging.info("\n--- Generating WAF rules ---")
    generated_rules = set() # Use a set to store unique rules
    for threat in all_detected_threats:
        rule = generate_rule(threat)
        if rule:
            generated_rules.add(rule) # Add to set to ensure uniqueness

    logging.info(f"Total unique WAF rules generated: {len(generated_rules)}")

    # --- Write Rules to Output File ---
    try:
        with open(args.output, 'w') as f:
            f.write("# Generated by AWAF-RGT (AI-Assisted WAF Rule Generator & Tuner)\n")
            f.write(f"# Generation Date: {datetime.datetime.now().isoformat()}\n\n")
            for rule in sorted(list(generated_rules)): # Sort for consistent output
                f.write(rule)
                f.write("\n\n") # Add extra newline for readability
        logging.info(f"Generated WAF rules written to: {args.output}")
    except Exception as e:
        logging.error(f"Error writing rules to file {args.output}: {e}")

    logging.info("AWAF-RGT finished Phase 3.")

if __name__ == "__main__":
    main()

